import { Logger } from '@nestjs/common';
import { CustomersService } from '@/customers/customers/customers.service';
import { Metadata, SubscriptionPayload, WebhookPayload } from '@/payments/chargify/domain/types';
import { ProductsService } from '@/onboard/products/products.service';
import { HubspotService } from '@/legacy/dis/legacy/hubspot/hubspot.service';
import { HubspotSyncActionsServices } from '@/legacy/dis/legacy/hubspot/hubspot-sync-actions.services';
import { Queue } from 'bull';
import { SessionDocument } from '@/onboard/schemas/session.schema';
import { SessionService } from '@/onboard/services/session.service';
import { OnboardService } from '@/onboard/onboard.service';
import { Step } from '@/onboard/domain/types';
import { PaymentChargifyService } from '@/payments/payment_chargify/payments.service';
import { CustomerEventsService } from '@/customers/customer-events/customer-events.service';
import { CustomerPropertiesService } from '@/customers/customer-properties/customer-properties.service';
export declare class AfyPaymentsServices {
    private logger;
    private readonly customersService;
    private readonly customerEventsServices;
    private readonly customerPropertiesServices;
    private readonly productServices;
    private readonly hubspotServices;
    private readonly hubspotSyncActionsServices;
    private readonly sessionServices;
    private readonly onboardServices;
    private readonly paymentChargifyServices;
    private readonly queue;
    constructor(logger: Logger, customersService: CustomersService, customerEventsServices: CustomerEventsService, customerPropertiesServices: CustomerPropertiesService, productServices: ProductsService, hubspotServices: HubspotService, hubspotSyncActionsServices: HubspotSyncActionsServices, sessionServices: SessionService, onboardServices: OnboardService, paymentChargifyServices: PaymentChargifyService, queue: Queue);
    private parseCustomerDataFromSubscriptionPayload;
    private enqueueHubspotSyncActionJob;
    private enqueueAddCreditsJob;
    private enqueueEnrollContactToListJob;
    private enqueueUpdateBookPackageJob;
    private findProduct;
    handleOneTimePaymentSuccessEvent(data: WebhookPayload<SubscriptionPayload>): Promise<void>;
    private activateCustomer;
    handleUpsellOfferPaymentSuccessEvent(data: WebhookPayload<SubscriptionPayload>, offerMetadata: Metadata): Promise<SessionDocument>;
    handleDirectSalePaymentSuccessEvent(data: WebhookPayload<SubscriptionPayload>, offerMetadata: Metadata): Promise<SessionDocument>;
    handleNewSubscriptionWithoutSession(data: WebhookPayload<SubscriptionPayload>, offerMetadata: Metadata, sessionDefaultStep: Step): Promise<SessionDocument>;
}
