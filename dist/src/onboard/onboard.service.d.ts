import { Logger } from '@nestjs/common';
import { DateTime } from 'luxon';
import { Model } from 'mongoose';
import { CoachingDetails, MarketingParameters, OfferCode, OfferId, SalesParameters, SessionId, Step } from './domain/types';
import { Session as SessionModel, SessionDocument } from './schemas/session.schema';
import { Offer as OfferModel, OfferDocument } from './schemas/offer.schema';
import { ProductDocument } from '@/onboard/products/schemas/product.schema';
import { CreateOfferDto } from './dto/create-offer.dto';
import { CreateCustomerDto } from '@/customers/customers/dto/create-customer.dto';
import { CustomersService } from '@/customers/customers/customers.service';
import { DisService } from '@/legacy/dis/dis.service';
import { Session } from './domain/session';
import { CustomerDocument } from '@/customers/customers/schemas/customer.schema';
import { WebhookIdempotencyDocument } from './schemas/webhook-idempotency.schema';
import { ContractedOffer } from './domain/offer';
import { CoachesService } from '@/onboard/coaches/coaches.service';
import { CoachDocument } from '@/onboard/coaches/schemas/coach.schema';
import { CreateBookOptionDto } from './dto/create-book-option.dto';
import { BookOptionDocument } from './schemas/book-option.schema';
import { GenerateBookService } from '@/onboard/generate-book/generate-book.service';
import { BookDetailsDto } from './dto/book-details.dto';
import { Content } from '@/internal/config/app.config';
import { HubspotService } from '@/legacy/dis/legacy/hubspot/hubspot.service';
import { Queue } from 'bull';
import { LeadsService } from '@/campaigns/email-campaigns/leads/leads.service';
import { CmsService } from '@/cms/cms/cms.service';
import { SalesReportWithDealsResponseDto } from './dto/sales-with-deals.dto';
import { ConfigService } from '@nestjs/config';
import { ProductsService } from '@/onboard/products/products.service';
import { CoachEmailReminderResponseDto } from './dto/coach-email-reminder.dto';
import { CustomerSubscriptionDocument } from '@/customers/customers/schemas/customer-subscription.schema';
import { UnsubscriptionReportDto } from '@/customers/customers/dto/unsubscription-report.dto';
import { PaymentChargifyService } from '@/payments/payment_chargify/payments.service';
import { EmailRemindersService } from '@/onboard/email-reminders/email-reminders.service';
import { Component, SessionOnboardSales, Subscription } from '@/payments/chargify/domain/types';
import { SimplePublicObject } from '@hubspot/api-client/lib/codegen/crm/deals/model/simplePublicObject';
import { SocialMediaDto } from '@/onboard/dto/social-media.dto';
import { SalesReportResponseDto } from './dto/sales-report.dto';
import { CalendarDtoWithCoach } from '@/legacy/dis/legacy/calendar/dto/calendar.dto';
import { CalendarService } from '@/legacy/dis/legacy/calendar/calendar.service';
import { CreateCustomerEventDto } from '@/customers/customer-events/dto/create-customer-event.dto';
import { CustomerEventsService } from '@/customers/customer-events/customer-events.service';
import { CheckSessionPaymentDto } from '@/onboard/dto/check-session-payment.dto';
import { CustomerPropertiesService } from '@/customers/customer-properties/customer-properties.service';
import { SessionService } from '@/onboard/services/session.service';
import { OnboardMetricsDto } from './dto/onboard-metrics.dto';
import { SchemaId } from '@/internal/types/helpers';
import { HubspotCreateDealRequestDto } from './dto/hubspot-deal-create.dto';
import { OrderBookAndUpdateSessionDto } from '@/onboard/dto/order-book-and-update-session.dto';
import { Axios } from 'axios';
import { HubspotSyncActionsServices } from '@/legacy/dis/legacy/hubspot/hubspot-sync-actions.services';
import { SummaryDTO, SummaryGuideDTO } from '@/onboard/dto/summary.dto';
import { UpdateScheduledCoachInSessionDto } from '@/onboard/email-reminders/dto/update-scheduled-coach-in-session.dto';
import AfyLoggerService from '@/integrations/afy-logger/afy-logger.service';
import { DentistCoachesService } from '@/onboard/dentist-coaches/dentist-coaches.service';
import { OffersService } from '@/onboard/services/offers.service';
export declare class OnboardService {
    private readonly queue;
    private readonly offerModel;
    private readonly sessionModel;
    private readonly webhookIdempotencyModel;
    private readonly bookOptionModel;
    private readonly disService;
    private readonly configService;
    private readonly customersService;
    private readonly coachesService;
    private readonly dentistCoachesService;
    private readonly generateBookService;
    private readonly hubspotService;
    private readonly hubspotSyncActionsServices;
    private readonly leadsService;
    private cmsServices;
    private readonly content;
    private readonly productsService;
    private readonly logger;
    private readonly paymentChargifyService;
    private readonly emailRemindersService;
    private readonly customerEventsService;
    private readonly scheduleCoachDuration;
    private readonly calendarService;
    private readonly customerPropertiesService;
    private readonly sessionService;
    private readonly http;
    private readonly afyLoggerService;
    private readonly offersService;
    private readonly coachingDetailsQueue;
    constructor(queue: Queue, offerModel: Model<OfferDocument>, sessionModel: Model<SessionDocument>, webhookIdempotencyModel: Model<WebhookIdempotencyDocument>, bookOptionModel: Model<BookOptionDocument>, disService: DisService, configService: ConfigService, customersService: CustomersService, coachesService: CoachesService, dentistCoachesService: DentistCoachesService, generateBookService: GenerateBookService, hubspotService: HubspotService, hubspotSyncActionsServices: HubspotSyncActionsServices, leadsService: LeadsService, cmsServices: CmsService, content: Content, productsService: ProductsService, logger: Logger, paymentChargifyService: PaymentChargifyService, emailRemindersService: EmailRemindersService, customerEventsService: CustomerEventsService, scheduleCoachDuration: number, calendarService: CalendarService, customerPropertiesService: CustomerPropertiesService, sessionService: SessionService, http: Axios, afyLoggerService: AfyLoggerService, offersService: OffersService, coachingDetailsQueue: Queue);
    getAllOnboardMetrics(start: string, end: string): Promise<Array<SessionModel>>;
    updateSessionWithCoach({ coachEmail, sessionId, }: UpdateScheduledCoachInSessionDto): Promise<SessionDocument>;
    resumeSession(offerId: OfferId, email: string, password: string): Promise<SessionDocument | false>;
    offerCodeToOfferId(code: OfferCode): Promise<SchemaId>;
    saveAddonAnswer(sessionId: SessionId, offerId: OfferId, accepted: boolean): Promise<void>;
    bindCustomerAndStartPaymentIntent(dto: CreateCustomerDto, offer: OfferDocument, session: SessionDocument): Promise<SessionDocument>;
    startPaymentIntent(customer: CustomerDocument, offer: OfferDocument, session: SessionDocument, chargifyToken?: string): Promise<string>;
    isTrainingWebinarEnabled(): boolean;
    offerExists(code: OfferCode): Promise<boolean>;
    offerContractedExists(code: OfferCode): boolean;
    sessionExists(sessionId: SessionId, offerCode: OfferCode): Promise<boolean>;
    findSession(sessionId: SessionId): Promise<SessionDocument>;
    addCoachingDetailsQueue(email: string): Promise<void>;
    updateDealWithCoachDetails(email: string): Promise<boolean>;
    getCoachingHubspotDetails(email: string): Promise<CoachingDetails | Record<string, never>>;
    findOfferBySession(sessionId: SessionId): Promise<OfferDocument>;
    createOffer(dto: CreateOfferDto): Promise<OfferDocument>;
    updateOffer(dto: CreateOfferDto, id: string): Promise<import("mongoose").Document<unknown, any, OfferModel> & OfferModel & {
        _id: import("mongoose").Types.ObjectId;
    } & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    getOffersList(): Promise<Array<OfferDocument>>;
    createBookOption(dto: CreateBookOptionDto): Promise<BookOptionDocument>;
    getBookOptionByBookId(bookId: string): Promise<BookOptionDocument>;
    findMainOffer(code: OfferCode): Promise<OfferDocument>;
    calculateAnnualPrice(offerData: OfferDocument[]): number;
    calculateMonthlyPrice(offerData: OfferDocument[]): number;
    findContractedOfferByCode(code: OfferCode): Promise<ContractedOffer[]>;
    findAddonOffer(code: OfferCode): Promise<OfferDocument>;
    createSession(offer: OfferDocument, marketingParameters?: MarketingParameters, salesParameters?: SalesParameters): Promise<SessionDocument>;
    assignCoachToSession(sessionId: string, coach: CoachDocument): Promise<void>;
    findAndAssignCoachToSession(sessionDocument: SessionDocument, forceRR?: boolean): Promise<CoachDocument>;
    getNextStepFromArray(steps: string[], currentStep: string): string;
    getPrevStepFromArray(steps: string[], currentStep: string): Step;
    isScheduleCoaching(steps: string[], currentStep: string, sessionDocument: SessionDocument): Promise<string>;
    updateStepAndPopulateSession(currentSession: SessionDocument): Promise<Session>;
    registerPaymentSuccess(sessionId: string, clientSecret: string, reference: string, customerEmail: string): Promise<SessionDocument>;
    registerPaymentFailure(sessionId: string, clientSecret: string, description: string): Promise<SessionDocument>;
    isRepeatedWebhookRequest(key: string, objectType: string | null): Promise<boolean>;
    getScheduleCoachingSlots(session: SessionDocument, start: string, outputTimezone?: string): Promise<CalendarDtoWithCoach>;
    scheduleCoaching(session: SessionDocument, start: string, timezone: string): Promise<void>;
    webinarRegistration(start: string, timezone: string, wantsSms: boolean, session: SessionDocument): Promise<void>;
    saveBookDetailsAndGenerateBook(dto: BookDetailsDto, session: SessionDocument): Promise<SessionDocument>;
    syncSucccessfulPaymentWithHubspot(sessionId: string, customerEmail?: string): Promise<void>;
    handleDeleteSubscription(subscription: Subscription): Promise<void>;
    addCustomerToWorkFlow(customer: CustomerDocument, offer: OfferDocument, currentStep: string): Promise<void>;
    getOnboardLeads(Customer: CustomerDocument): Promise<(import("mongoose").Document<unknown, any, import("../campaigns/email-campaigns/leads/schemas/lead.schema").Lead> & import("../campaigns/email-campaigns/leads/schemas/lead.schema").Lead & {
        _id: import("mongoose").Types.ObjectId;
    })[]>;
    handleBookCredit(productData: ProductDocument, subscription: Subscription): Promise<void>;
    updateHubspotDeal(eventId: string | number, subscription: Subscription, component: Component, lastPaymentDate?: string): Promise<SimplePublicObject>;
    getLastUpdatedDate(lastPaymentDate?: string): string;
    createHubspotDeal(eventId: string | number, subscription: Subscription, lastPaymentDate?: string, componentId?: number, sessionId?: string, manualFlag?: boolean): Promise<SimplePublicObject>;
    getOnboardMetrics(startDate: string, endDate: string): Promise<{
        VisitsCount: number;
        PaidSalesCount: number;
        BookGeneratedCount: number;
        CancellationCount: number;
        AutoLoginCount: number;
    }>;
    getHubspotDealDetailsBySubscription(onBoardSales: any): Promise<SessionOnboardSales[]>;
    getOnboardMetricsByPaidSales(page: number, perPage: number, startDate: string, endDate: string): Promise<SalesReportResponseDto>;
    getOnboardMetricsByUniqueVisits(page: number, perPage: number, startDate: string, endDate: string): Promise<SalesReportResponseDto>;
    getOnboardMetricsByBooks(page: number, perPage: number, startDate: string, endDate: string): Promise<SalesReportResponseDto>;
    getOnboardMetricsByAutoLogin(page: number, perPage: number, startDate: string, endDate: string): Promise<SalesReportResponseDto>;
    getOnboardMetricsByCancellations(page: number, perPage: number, startDate: string, endDate: string): Promise<SalesReportResponseDto>;
    getOnboardMetricsByFilter(page: number, perPage: number, filter: OnboardMetricsDto, startDate: string, endDate: string): Promise<{
        SalesDetails: import("@/internal/utils/paginator").PaginatorSchematicsInterface<any>;
    }>;
    getOnboardMetricsBySearch(page: number, perPage: number, searchQuery: string): Promise<SalesReportResponseDto>;
    getSessionByDateRange(fromDate: string, toDate: string): Promise<SessionDocument[]>;
    getSalesWithDeals(fromDate: string, toDate: string): Promise<SalesReportWithDealsResponseDto>;
    getSessionWithCoachByDateRange(fromDate: string, toDate: string): Promise<SessionDocument[]>;
    getCoachEmailReminders(fromDate: string, toDate: string): Promise<CoachEmailReminderResponseDto>;
    createCustomerUnsubscriptionFromWebhook(event: any): Promise<CustomerSubscriptionDocument>;
    customerUnsubscriptionReport(dto: UnsubscriptionReportDto): Promise<Array<CustomerSubscriptionDocument>>;
    private bindCustomer;
    private getOfferProducts;
    private getPreviousStep;
    private getNextStep;
    private getCoachFromOwner;
    private ensureSessionHasCoach;
    private formatOrderNumber;
    private populateSession;
    private buildLoggingPayload;
    private updateOfferDescriptions;
    private calculateTrialDateForOffer;
    private toUsDateFormat;
    private registerPaymentOutcome;
    updateCustomerSocialMediaTraining({ email, planName, }: SocialMediaDto): Promise<void>;
    getSessionToSyncDeals(since?: DateTime): Promise<SessionDocument>;
    syncSessionWithDeal(session: SessionDocument, subscription: Subscription, deal: SimplePublicObject): Promise<SessionModel & import("mongoose").Document<any, any, any> & {
        _id: any;
    }>;
    chargifyWebhookActivity(customerEmail: string, dto: CreateCustomerEventDto, body: {
        [key: string]: any;
    }): Promise<import("mongoose").Document<unknown, any, import("../customers/customer-events/schemas/customer-events.schema").CustomerEvent> & import("../customers/customer-events/schemas/customer-events.schema").CustomerEvent & {
        _id: import("mongoose").Types.ObjectId;
    }>;
    getPaymentDetails({ sessionId, offerId }: CheckSessionPaymentDto): Promise<SessionModel & import("mongoose").Document<any, any, any> & {
        _id: any;
    }>;
    reCreateHubspotDeal(dto: HubspotCreateDealRequestDto): Promise<SimplePublicObject>;
    orderBookAndUpdateSession({ sessionId, draftId, quantity, isDigital }: OrderBookAndUpdateSessionDto, jwt: string): Promise<{
        session: Session;
        order: object;
    }>;
    findOfferById(offerId: SchemaId): Promise<OfferDocument>;
    summary(session: SessionDocument): Promise<SummaryDTO | SummaryGuideDTO>;
    logBookOrderWhileTrial(customer: CustomerDocument, dto: OrderBookAndUpdateSessionDto): Promise<void>;
}
